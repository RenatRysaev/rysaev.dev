{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ci-cd-1/","webpackCompilationHash":"14a94a2e4a3abb92d6b1","result":{"data":{"site":{"siteMetadata":{"title":"Блог о веб-разработке","author":"Ренат Рысаев"}},"markdownRemark":{"id":"c5ef6afc-9c5a-55ca-a17e-709b41993f85","excerpt":"Я планирую серию статей, в которых постараюсь раскрыть следующие темы: Docker для разработки React-приложения CI/CD с использованием Jenkins Nginx для раздачи…","html":"<h2>Я планирую серию статей, в которых постараюсь раскрыть следующие темы:</h2>\n<ol>\n<li><b>Docker для разработки React-приложения</b></li>\n<li><b>CI/CD с использованием Jenkins</b></li>\n<li><b>Nginx для раздачи статики</b></li>\n</ol>\n<h3>Это первая часть, в которой мы разберемся с тем как настроить окружение для разработки с Docker + React</h3>\n<h3>Вступление</h3>\n<p>Все началось с того, что однажды на рабочем проекте потребовалось обновить зависимости.\nПосле долгих мучений я наконец-то запушил свой коммит в репозиторий и отправился к нашему девопсу,\nчтобы попросить задеплоить сборку из jenkins на тестовый сервер. Ну и как вы уже, наверное, догадываетесь девопсу этого сделать\nне удалось, потому что на сервере с jenkins стояла node.js другой версии и закешировались старые версии библиотек.\nЯ бы скорее всего решил эту проблему, но на следующий рабочий день меня переводили на другой проект.</p>\n<p>Ну собственно я к чему, используя docker, мы точно бы не имели этих проблем, и вот почему:</p>\n<ol>\n<li>Единое окружение локально и на сервере</li>\n<li>Воспроизводимость</li>\n</ol>\n<p>Поэтому я решил немного раскурить Docker и поделиться полезной информацией о том\nкак его использовать для разработки и деплоя.  </p>\n<p><b>Предпологается что на вашей машине уже установлено:</b></p>\n<ol>\n<li><a href=\"https://www.docker.com/\">Docker</a> v18.09.2</li>\n<li><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> v3.0.1</li>\n</ol>\n<h3>Создание проекта</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">create-react-app dockerized-react\n<span class=\"token function\">cd</span> dockerized-react</code></pre></div>\n<h3>Напишем наш Dockerfile для создания образа</h3>\n<p><b>Dockerfile</b></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Берем node.js v8 в качестве родительского образа\nFROM node:8\n# Устанавливаем рабочую директорию\nWORKDIR /app\n# Копируем файлы yarn.lock и package.json в рабочую директорию\nCOPY package.json yarn.lock /app/\n# Устанавливаем зависимости\nRUN yarn install\n# Открываем порт 3000\nEXPOSE 3000\n# Запускаем React-приложение после запуска контейнера\nCMD [&quot;yarn&quot;, &quot;start&quot;]</code></pre></div>\n<h3>Добавим в .dockerignore директории/файлы, которые не должны попасть в образ</h3>\n<p><b>.dockerignore</b></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.git\nnode_modules\nbuild</code></pre></div>\n<h3>Создание образа</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t dockerized-app <span class=\"token keyword\">.</span></code></pre></div>\n<h3>Запуск контейнера</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it -v <span class=\"token variable\">${PWD}</span>:/app -v /app/node_modules -p 3001:3000 -e CHOKIDAR_USEPOLLING<span class=\"token operator\">=</span>true dockerized-app</code></pre></div>\n<p>Для Windows</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it -v %cd%:/app -v /app/node_modules -p 3001:3000 -e CHOKIDAR_USEPOLLING<span class=\"token operator\">=</span>true dockerized-app</code></pre></div>\n<p><b>Давайте разберемся для чего и какие аргументы мы передаем</b></p>\n<ol>\n<li>“-it” - интерактивный режим</li>\n<li>“-v ${PWD}:/app” - монтируем текущую рабочую директорию в директорию /app docker-контейнера</li>\n<li>“-v /app/node<em>modules” - используем node</em>modules из контейнера</li>\n<li>“-p” - сопоставляем порт docker-контейнера порту на хост системе</li>\n<li>“-e CHOKIDAR_USEPOLLING=true” - устанавливаем переменную окружения для принудительного слежения webpack за нашим томом.</li>\n</ol>\n<p><b>Осталось открыть приложение в браузере <a href=\"http://localhost:3001/\">http://localhost:3001/</a></b></p>\n<p><b>Готово, теперь webpack отслеживает изменения файлов и изменив код в каком-либо файле мы сможем увидеть результат в браузере.</b></p>","frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 1.","date":"July 21, 2019","description":"Готовим окружение для разработки React-приложения с Docker."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-ci-cd-1/","previous":{"fields":{"slug":"/react-ci-cd-2/"},"frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 2."}},"next":null}}}