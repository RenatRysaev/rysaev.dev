{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ci-cd-2/","webpackCompilationHash":"6e7bdf992d6785b62f4b","result":{"data":{"site":{"siteMetadata":{"title":"Блог о веб-разработке","author":"Ренат Рысаев"}},"markdownRemark":{"id":"d6ac6776-4a8f-571c-a478-fcdd9bbf47a9","excerpt":"Я не являюсь экспертом в DevOps, данный материал предназначен для новичков\nи может использоваться в ознакомительных целях. Это вторая часть, в которой мы…","html":"<p><b>Я не являюсь экспертом в DevOps, данный материал предназначен для новичков\nи может использоваться в ознакомительных целях.</b></p>\n<h3>Это вторая часть, в которой мы разберемся с тем как подготовить Docker-образ с React-приложением для тестирования и развертывания на удаленном сервере</h3>\n<p><b>В <a href=\"https://rysaev.dev/react-ci-cd-1/\">прошлой части</a> мы настраивали окружение для\nразработки нашего приложения.</b></p>\n<p><b>Сегодня мы подготовим два Docker-образа для тестирования и деплоя приложения + настроим Nginx для раздачи статики.</b></p>\n<blockquote>\n<p><a href=\"https://github.com/RenatRysaev/dockerized-react/tree/react-ci-cd-2\">Репозиторий с итоговым кодом</a> для этой статьи</p>\n</blockquote>\n<p>Первым делом давайте переименуем уже существующий Dockerfile -> Dockerfile.dev.<br>\nЗатем создадим еще два Dockerfile, назвав их Dockerfile.test и Dockerfile.prod, которые мы будем использовать для CI/CD.</p>\n<p><b>Dockerfile.test</b></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Берем в качестве родительского образа node:8-apline</span>\n<span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>8<span class=\"token punctuation\">-</span>alpine\n<span class=\"token comment\"># Устанавливаем рабочую директорию</span>\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token comment\"># Копируем файлы package.json yarn.lock в рабочую директорию</span>\n<span class=\"token keyword\">COPY</span> package.json yarn.lock /app/\n<span class=\"token comment\"># Устаналиваем зависимости</span>\n<span class=\"token keyword\">RUN</span> yarn install\n<span class=\"token comment\"># Копируем исходники в рабочую директорию</span>\n<span class=\"token keyword\">COPY</span> . /app/\n<span class=\"token comment\"># Запускаем тесты</span>\n<span class=\"token keyword\">RUN</span> CI=true yarn test\n<span class=\"token comment\"># Собираем проект</span>\n<span class=\"token keyword\">RUN</span> yarn build</code></pre></div>\n<p><b>Dockerfile.prod</b></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Берем в качестве родительского образа node:8-apline и назовем эту ступень сборки </span><span class=\"token string\">\"build-stage\"</span>\n<span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>8<span class=\"token punctuation\">-</span>alpine as build<span class=\"token punctuation\">-</span>stage\n<span class=\"token comment\"># Устанавливаем рабочую директорию</span>\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token comment\"># Копируем файлы package.json yarn.lock в рабочую директорию</span>\n<span class=\"token keyword\">COPY</span> package.json yarn.lock /app/\n<span class=\"token comment\"># Устаналиваем зависимости</span>\n<span class=\"token keyword\">RUN</span> yarn install\n<span class=\"token comment\"># Копируем исходники в рабочую директорию</span>\n<span class=\"token keyword\">COPY</span> . /app/\n<span class=\"token comment\"># Собираем проект</span>\n<span class=\"token keyword\">RUN</span> yarn build\n\n<span class=\"token comment\"># Вторая ступень сборки, поднимем nginx для раздачи статики</span>\n<span class=\"token keyword\">FROM</span> nginx<span class=\"token punctuation\">:</span>stable<span class=\"token punctuation\">-</span>alpine\n<span class=\"token comment\"># Копируем билд из ступени сборки </span><span class=\"token string\">\"build-stage\"</span> в директорию образа /usr/share/nginx/html\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=build<span class=\"token punctuation\">-</span>stage /app/build /usr/share/nginx/html\n<span class=\"token comment\"># Копируем конфиг nginx в директорию образа /etc/nginx/nginx.conf (Напишем его позже)</span>\n<span class=\"token keyword\">COPY</span> nginx.conf /etc/nginx/nginx.conf\n<span class=\"token comment\"># Открываем 80 порт</span>\n<span class=\"token keyword\">EXPOSE</span> 80\n<span class=\"token comment\"># Указываем команду, поднимающую nginx при запуске контейнера</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nginx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daemon off;\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Напишем конфиг для Nginx</h3>\n<p><b>nginx.conf</b></p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token comment\"># Автоматически определяем количество процессов</span>\n<span class=\"token keyword\">worker_processes</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">events</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># Устанавливаем максимальное кол-во соединений для одного рабочего процесса</span>\n    <span class=\"token keyword\">worker_connections</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># Указывем nginx, чтобы он пытался принять максимльное кол-во подключений</span>\n    <span class=\"token keyword\">multi_accept</span> on<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">http</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># Указываем корректные заголовки для всех типов расширений</span>\n    <span class=\"token keyword\">include</span> mime<span class=\"token punctuation\">.</span><span class=\"token keyword\">types</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default_type</span> application<span class=\"token operator\">/</span>octet<span class=\"token operator\">-</span>stream<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># Увеличиваем производительность</span>\n    <span class=\"token keyword\">sendfile</span> on<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># Сжимаем данные</span>\n    <span class=\"token keyword\">gzip</span> on<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">gzip_min_length</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">gzip_http_version</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">gzip_types</span> text<span class=\"token operator\">/</span>plain text<span class=\"token operator\">/</span>css application<span class=\"token operator\">/</span>json application<span class=\"token operator\">/</span>javascript text<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml application<span class=\"token operator\">/</span>xml<span class=\"token operator\">+</span>rss text<span class=\"token operator\">/</span>javascript<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">index</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>htm<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># Слушаем 80 порт</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\"># Директория из которой раздаем статику</span>\n        <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span> \n        <span class=\"token comment\"># Сначала пытаемся обработать запрос как к файлу или директории</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Собираем образ и запускаем контейнер</h3>\n<p>Сборка образа для тестирования:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t dockerized-react:test -f Dockerfile.test <span class=\"token keyword\">.</span></code></pre></div>\n<p>Сборка образа для продакшена:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t dockerized-react:prod -f Dockerfile.prod <span class=\"token keyword\">.</span></code></pre></div>\n<p>Для того, чтобы запустить контейнер и убедиться в том, что Nginx раздает статику выполните:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it -p 80:80 dockerized-react:prod</code></pre></div>\n<p>Откройте <a href=\"http://localhost/\">localhost</a></p>\n<p>Теперь мы имеем контейнер с Nginx, который умеет раздавать сборку нашего приложения.</p>\n<p><b>В итоге мы имеем три Docker-образа:</b></p>\n<ol>\n<li>Для разработки</li>\n<li>Для тестирования</li>\n<li>Для продакшена</li>\n</ol>\n<p><b>В следующей статье мы будем разбираться CI(Continuous Integration)</b></p>","frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 2.","date":"July 22, 2019","description":"Готовим Docker-образ с React-приложением для тестирования и развертывания на удаленном сервере"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-ci-cd-2/","previous":{"fields":{"slug":"/react-ci-cd-1/"},"frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 1."}},"next":{"fields":{"slug":"/react-ci-cd-3/"},"frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 3."}}}}}