{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ci-cd-2/","webpackCompilationHash":"8de5ea0ec3ed4098b781","result":{"data":{"site":{"siteMetadata":{"title":"Блог о веб-разработке","author":"Ренат Рысаев"}},"markdownRemark":{"id":"c3e485c5-e7b3-535a-8248-593bc1930e7b","excerpt":"Это вторая часть, в которой мы разберемся с тем как подготовить окружение для развертывания Docker + React В прошлой части мы настраивали окружение для…","html":"<h3>Это вторая часть, в которой мы разберемся с тем как подготовить окружение для развертывания Docker + React</h3>\n<p><b>В <a href=\"http://localhost:8000/react-ci-cd-1/\">прошлой части</a> мы настраивали окружение для\nразработки нашего приложения, пришло время подготовить окружения для деплоя.</b></p>\n<p><b>Сегодня мы напишем второй Dockerfile для деплоя + настроим Nginx для раздачи статики.</b></p>\n<blockquote>\n<p><a href=\"https://github.com/RenatRysaev/dockerized-react/tree/react-ci-cd-2\">Репозиторий с итоговым кодом</a> для этой статьи</p>\n</blockquote>\n<p>Первым делом давайте переименуем уже существующий Dockerfile -> Dockerfile.dev.<br>\nЗатем создадим второй докерфайл, назвав его Dockerfile.prod, который мы будем использовать для продакшена.</p>\n<p><b>Dockerfile.prod</b></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Берем в качестве родительского образа node:8-apline и назовем эту ступень сборки &quot;build-stage&quot;\nFROM node:8-alpine as build-stage\n# Устанавливаем рабочую директорию\nWORKDIR /app\n# Копируем файлы package.json yarn.lock в рабочую директорию\nCOPY package.json yarn.lock /app/\n# Устаналиваем зависимости\nRUN yarn install\n# Копируем исходники в рабочую директорию\nCOPY . /app/\n# Собираем проект\nRUN yarn build\n\n# Вторая ступень сборки, поднимем nginx для раздачи статики\nFROM nginx:stable-alpine\n# Копируем билд из ступени сборки &quot;build-stage&quot; в директорию образа /usr/share/nginx/html\nCOPY --from=build-stage /app/build /usr/share/nginx/html\n# Копируем конфиг nginx в директорию образа /etc/nginx/nginx.conf (Напишем его позже)\nCOPY nginx.conf /etc/nginx/nginx.conf\n# Открываем 80 порт\nEXPOSE 80\n# Указываем команду, поднимающую nginx при запуске контейнера\nCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre></div>\n<h3>Напишем конфиг для Nginx</h3>\n<p><b>nginx.conf</b></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Автоматически определяем количество процессов\nworker_processes auto;\nevents {\n    # Устанавливаем максимальное кол-во соединений для одного рабочего процесса\n    worker_connections 8000;\n    # Указывем nginx, чтобы он пытался принять максимльное кол-во подключений\n    multi_accept on;\n}\nhttp {\n    # Указываем корректные заголовки для всех типов расширений\n    include mime.types;\n    default_type application/octet-stream;\n    # Увеличиваем производительность\n    sendfile on;\n    # Сжимаем данные\n    gzip on;\n    gzip_comp_level 6;\n    gzip_min_length 100;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n    server {\n        index index.html index.htm;\n        # Слушаем 80 порт\n        listen 80;\n        # Директория из которой раздаем статику\n        root /usr/share/nginx/html; \n        # Сначала пытаемся обработать запрос как к файлу или директории\n        location / {\n            try_files $uri $uri/ /index.html;\n        }\n    }\n}</code></pre></div>\n<h3>Собираем образ и запускаем контейнер</h3>\n<p>Для того, чтобы собрать образ выполните:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t dockerized-react:prod -f Dockerfile.prod <span class=\"token keyword\">.</span></code></pre></div>\n<p>Для того, чтобы запустить контейнер и убедиться в том, что Nginx раздает статику выполните:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it -p 80:80 dockerized-react:prod</code></pre></div>\n<p>Откройте <a href=\"http://localhost/\">localhost</a></p>\n<p>Готово, теперь мы имеем контейнер с Nginx, который умеет раздавать сборку нашего приложения.</p>\n<p><b>В следующей статье мы будем разбираться с тем как с помощью Jenkins развернуть Docker-контейнер\nна удаленном сервере.</b></p>","frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 2.","date":"July 22, 2019","description":"Готовим окружение для развертывания React-приложения с Docker."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-ci-cd-2/","previous":{"fields":{"slug":"/react-ci-cd-1/"},"frontmatter":{"title":"Используем Docker для разработки и развертывания React-приложений. Часть 1."}},"next":null}}}